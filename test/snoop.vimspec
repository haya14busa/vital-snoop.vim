Describe snoop

    Before all
        let s:V = vital#of('vital')
        let s:P = s:V.import('Prelude')
        let g:S = s:V.import('Vim.Snoop')
    End

    After all
        unlet g:S
    End

    Context .sid()
        It returns SID with relative path to &runtimepath
            let sid = g:S.sid('test/files/snoop.vim')
            Assert IsNumber(sid)
            Assert NotEquals(sid, -1)
        End
        It returns SID with absolute path
            let sid = g:S.sid(g:root . '/test/files/snoop.vim')
            Assert IsNumber(sid)
            Assert NotEquals(sid, -1)
        End
        It returns SID with unsourced autoload file (absolute path)
            let g:Snoop#test#snoop#is_loaded = 0
            Assert False(g:Snoop#test#snoop#is_loaded)
            let sid = g:S.sid(g:root . '/autoload/Snoop/test/snoop.vim')
            Assert IsNumber(sid)
            Assert NotEquals(sid, -1)
            Assert True(g:Snoop#test#snoop#is_loaded)
        End
        It returns SID with unsourced autoload file (relative path)
            let g:Snoop#test#snoop_relative#is_loaded = 0
            Assert False(g:Snoop#test#snoop_relative#is_loaded)
            let sid = g:S.sid('autoload/Snoop/test/snoop_relative.vim')
            Assert IsNumber(sid)
            Assert NotEquals(sid, -1)
            Assert True(g:Snoop#test#snoop_relative#is_loaded)
        End
        It returns SID with symbolic link (relative)
            if s:P.is_windows()
                Skip "windows doesn't handle symlink"
            endif
            let sid = g:S.sid('autoload/Snoop/test/snoop_symbolic.vim')
            Assert IsNumber(sid)
            Assert NotEquals(sid, -1)
        End
        It returns SID with symbolic link (absolute)
            if s:P.is_windows()
                Skip "windows doesn't handle symlink"
            endif
            let sid = g:S.sid(g:root . '/autoload/Snoop/test/snoop_symbolic.vim')
            Assert IsNumber(sid)
            Assert NotEquals(sid, -1)
        End
        It handle the case &regexpengine == 1
            if !exists('+regexpengine')
                Skip 'regexpengine option doesn''t exist'
            endif
            let regexpengine_save = &regexpengine
            let &regexpengine = 1
            try
                let sid = g:S.sid('test/files/snoop.vim')
                Assert IsNumber(sid)
                Assert NotEquals(sid, -1)
            finally
                let &regexpengine = regexpengine_save
            endtry
        End
        It throws with wrong absolute path
            Throws /vital: Snoop: file not found/ g:S.sid(g:root . '/test/files/notfound.vim')
        End
        It throws with wrong relative path
            Throws /vital: Snoop: file not found/ g:S.sid('test/files/notfound.vim')
        End
    End

    Context .sfuncs()
        It returns sfuncs with relative path to &runtimepath
            let sfuncs = g:S.sfuncs('test/files/snoop.vim')
            Assert IsDict(sfuncs)
            Assert HasKey(sfuncs, 'double')
            Assert Equals(sfuncs.double(3), 6)
            Assert HasKey(sfuncs, '_power', 'it handles underscore too')
            Assert Equals(sfuncs._power(3), 9)
        End
        It returns sfuncs with absolute path
            let sfuncs = g:S.sfuncs(g:root . '/test/files/snoop.vim')
            Assert IsDict(sfuncs)
            Assert HasKey(sfuncs, 'double')
            Assert Equals(sfuncs.double(3), 6)
            Assert HasKey(sfuncs, '_power', 'it handles underscore too')
            Assert Equals(sfuncs._power(3), 9)
        End
        It throws with wrong absolute path
            Throws /vital: Snoop: file not found/ g:S.sfuncs(g:root . '/test/files/notfound.vim')
        End
        It throws with wrong relative path
            Throws /vital: Snoop: file not found/ g:S.sfuncs('test/files/notfound.vim')
        End
    End

    Context .sid2sfuncs()
        It returns sfuncs with relative path to &runtimepath
            let sfuncs = g:S.sid2sfuncs(g:S.sid('test/files/snoop.vim'))
            Assert IsDict(sfuncs)
            Assert HasKey(sfuncs, 'double')
            Assert Equals(sfuncs.double(3), 6)
            Assert HasKey(sfuncs, '_power', 'it handles underscore too')
            Assert Equals(sfuncs._power(3), 9)
        End
    End

    Context .scriptnames()
        It returns scriptnames dict
            let sns = g:S.scriptnames()
            Assert IsDict(sns)
            Assert HasKey(sns, '1')
            for k in keys(sns)
                Assert True(k > 0)
                Assert IsDict(g:S.sid2sfuncs(k))
            endfor
        End
    End

End

